intervals_LBP <- seq(0,255, length.out = n_intervals_LBP)
n_intervals_LBP <- 30
intervals_LBP <- seq(0,255, length.out = n_intervals_LBP)
intervals_LBP
?txtProgressBar
?imageDat
?imageData
?cv2$imageData
?readImage
?resize
??resize
require("EBImage")
require("plyr")
require(reticulate)
require("wvtool")
cv2 <- reticulate::import('cv2')
?resize
?imageData
?lbp
?factor
?t
img_dir <- "/Users/djparker/Documents/Temp/Juilliard/Spring\ 2018/ADS_STAT_4243/Project_2/train"
img_dir
feature(img_dir)
source(feature.R)
?source
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir)
feature(img_dir, run.LBP = T)
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir, run.LBP = T)
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir, run.LBP = T)
feature(img_dir, run.LBP = T)
feature(img_dir, run.LBP = T)
start_time = Sys.time()
start_time
require("EBImage")
require("plyr")
require(reticulate)
require("wvtool")
cv2 <- reticulate::import('cv2')
require("EBImage")
require("plyr")
require(reticulate)
require("wvtool")
cv2 <- reticulate::import('cv2')
n_resize <- 128       # Uniform image size
n_intervals_LBP <- 30 # Number of LBP intensity levels
intervals_LBP <- seq(0, 255, length.out = n_intervals_LBP) # Feature level limits
n_files <- length(list.files(img_dir))
pet_names <- paste("pet", 1:n_files, ".jpg", sep = "")
pb <- txtProgressBar(min = 0, max = n_files, style = 3)
LBP <- data.frame(matrix(NA, n_files, n_intervals_LBP+1))
colnames(LBP) <- c("Image", paste("LBP_", 1:n_intervals_LBP, sep = ""))
LBP$Image <- pet_names
i=1
img <- readImage(paste(img_dir, pet_names[i], sep = ""))
img_dir
paste0(img_dir, "/")
img_dir
img_dir <- paste0(img_dir, "/")
img_dir
feature(img_dir, run.LBP = T)
getwd()
load("../output/train_feature_LBP_time.RData")
build_time
img_dir
?load
load("../output/train_feature_LBP_time.RData")
train_feature_LBP_time.RData
build_time
feature(img_dir, run.HOG = T)
source(feature.R)
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir, run.HOG = T)
reticulate::py_versions_windows()
reticulate::py_discover_config()
start_time = Sys.time() # Record time at beginning of extraction
require("EBImage")
require("plyr")
require(reticulate)
require("wvtool")
cv2 <- reticulate::import('cv2')
winSize <- tuple(64L,64L)     # Resize images
blockSize <- tuple(16L,16L)   # Size of one block
blockStride <- tuple(8L,8L)   # Length everytime block moves
cellSize <- tuple(8L,8L)      # Size of one cell
nbins = 9L                   # Number of orientations
nbins
class(nbins)
winSize
?tuple
class(winSize)
n_files <- length(list.files(img_dir))
pet_names <- paste("pet", 1:n_files, ".jpg", sep = "")
pb <- txtProgressBar(min = 0, max = n_files, style = 3)
HOG_desc = cv2$HOGDescriptor(winSize,
blockSize,
blockStride,
cellSize,
nbins)
HOG <- data.frame(matrix(NA, n_files, ncol = 1765))
colnames(HOG) <- c("Image", paste("HOG_", 1:1764, sep = ""))
HOG$Image <- pet_names
i=1
img <- cv2$imread(paste(img_dir, "pet", i, ".jpg", sep = ""))/255
img
img_resized <- cv2$resize(img, dsize = tuple(64, 64))
reticulate::py_config()
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir, run.HOG = T)
load("../output/train_feature_HOG_time.RData")
build_time
build_time_HOG
load("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/output/train_feature_HOG_time.RData")
rm(img)
im(i)
rm(i)
rm(c("n_files","n_resize"))
rm(nbins)
rm(n_resize)
build_time
start_time
source("/Users/djparker/Documents/GitHub/Predictive-Modeling-Cat-Dog/lib/feature.R")
feature(img_dir, run.color = T)
